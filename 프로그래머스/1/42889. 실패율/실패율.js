/**
* 5, [2, 1, 2, 6, 2, 4, 3, 3]
* => 1번 사용자 스테이지 2번 도전 중
* => 2번 사용자 스테이지 1번 도전 중
* => 3번 사용자 스테이지 2번 도전 중
* => 4번 사용자 스테이지 5번까지 전부 클리어
* => 5번 사용자 스테이지 2번 도전 중
* => 6번 사용자 스테이지 4번 도전 중
* => 7번 사용자 스테이지 3번 도전 중
* => 8번 사용자 스테이지 3번 도전 중
*
* 스테이지 1번: 2번 사용자 아직 클리어 X => 1/8
* 스테이지 2번: 1,3,5번 사용자 아직 클리어 X => 3/7
* 스테이지 3번: 7,8번 사용자 아직 클리어 X => 3/4
* 스테이지 4번: 6번 사용자 아직 클리어 X => 1/2
* 스테이지 5번: 0/1
*
* 각 스테이지 실패율 내림차순 정렬
*/
function solution(N, stages) {
    // 스테이지별 도전자 수
    const num = new Array(N+2).fill(0);
    for(const stage of stages) {
        num[stage] += 1;
    }
    
    // 스테이지별 실패한 사용자
    // 스테이지 번호가 있어야 하므로 객체 형태
    let fail = {};
    
    // 현재 스테이지를 도전했던 사용자 수
    let total = stages.length;
    
    // 실패율 계산
    for(let i= 1 ; i < N + 1; i++) {
        // 현재 스테이지에 도전 중인 사람이 없으면
        if(num[i] === 0) {
            fail[i] = 0;
            continue; // 다음으로
        }
        
        // 실패율 계산
        fail[i] = num[i] / total;
        
        // 다음 스테이지 도전했던 사용자 수
        total -= num[i];
    }
    
    // 실패율 높은 것부터 내림차순
    const result = Object.entries(fail).sort((a,b)=> b[1] - a[1]);
    
    // 스테이지 번호만 추출
    return result.map((item)=>Number(item[0]));
}